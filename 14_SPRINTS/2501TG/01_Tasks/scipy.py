# -*- coding: utf-8 -*-
"""Scipy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhlzEMKeIEzi-ELI_AHgFg4h7ZnrJnwd
"""

import statistics as st
import math as mt

#Geração de Dados

vendas_diarias = [
     120.5, 130.2, 115.8, 122.0, 135.0, 126.7, 129.1, 131.4,
     125.5, 133.2, 116.5, 125.0, 136.0, 126.7, 129.1, 135.4,
     128.5, 135.2, 116.8, 120.0, 135.0, 126.7, 126.1, 130.5
]

print('--- Dados Simulados ---')
print('--- Vendas Diárias', vendas_diarias)
print('\n')

print('Análise Descritiva Simples')

tamanho_amostra  = len(vendas_diarias)

print('Quantidade de dias de vendas', {tamanho_amostra})

media_vendas = st.mean(vendas_diarias)
print(media_vendas)

mediana_vendas = st.median(vendas_diarias)
print(mediana_vendas)

moda_vendas = st.mode(vendas_diarias)
print(f'Moda das vendas', {moda_vendas})

# Moda
try:
  moda_vendas = st.mode(vendas_diarias)
  print(f'Moda das vendas', {moda_vendas})

except st.StatisticsError as e:
  print('Não foi possível Calcular a moda (erro: ) {a}')

desvio_padrao = st.stdev(vendas_diarias)
print(desvio_padrao)

variancia_vendas = st.variance(vendas_diarias)
print(variancia_vendas)

import statistics as st
import math as mt

compras_app = [

    55.20, 78.50, 45.00, 120.30, 62.80, 91.00, 88.40, 50.00, 75.10, 105.00,
    60.50, 70.00, 95.00, 110.00, 80.00, 68.20, 59.90, 82.00, 98.70, 72.30,
    130.00, 65.00, 85.00, 77.00, 90.00
]

print('--- Compras via Aplicativo', compras_app)
print('\n')


print('Análise Descritiva Simples')

tamanho_amostra  = len(compras_app)
print('Quantidade de dias de vendas', {tamanho_amostra})

media_comprasApp = st.mean(compras_app)
print('Média de Compras App', {media_comprasApp})

mediana_comprasApp = st.median(compras_app)
print('Médiana de Compras App', {mediana_comprasApp})

moda_comprasApp = st.mode(compras_app)
print(f'Moda das vendas', {moda_comprasApp})

# Moda
try:
  moda_comprasApp = st.mode(compras_app)
  print(f'Moda das vendas App (Try / Except)', {moda_comprasApp})

except st.StatisticsError as e:
  print('Não foi possível Calcular a moda (erro: ) {a}')

desvio_padrao = st.stdev(compras_app)
print(f'Desvio Padrão das compras App', {desvio_padrao})

variancia_comprasApp = st.variance(compras_app)
print(f'Variancia das compras App', {variancia_comprasApp})

import statistics as st
import math as mt

compras_web = [

    40.00, 60.10, 35.50, 80.00, 52.00, 70.00, 65.80, 48.00, 58.90, 72.00,
    45.50, 55.00, 68.00, 75.00, 63.00, 42.00, 50.00, 60.00, 71.00, 53.00,
    90.00, 49.00, 67.00, 56.00, 69.00, 70.00, 55.00, 62.00, 78.00, 51.00
]

print('--- Compras via Web', compras_web)
print('\n')


print('Análise Descritiva Simples')

tamanho_amostra  = len(compras_web)
print('Quantidade de dias de vendas', {tamanho_amostra})

media_comprasWeb = st.mean(compras_web)
print('Média de Compras App', {media_comprasWeb})

mediana_comprasWeb = st.median(compras_web)
print('Médiana de Compras App', {mediana_comprasWeb})

moda_comprasWeb = st.mode(compras_web)
print(f'Moda das vendas', {moda_comprasWeb})

# Moda
try:
  moda_comprasWeb = st.mode(compras_web)
  print(f'Moda das vendas App (Try / Except)', {moda_comprasWeb})

except st.StatisticsError as e:
  print('Não foi possível Calcular a moda (erro: ) {a}')

desvio_padrao = st.stdev(compras_web)
print(f'Desvio Padrão das compras App', {desvio_padrao})

variancia_comprasWeb = st.variance(compras_web)
print(f'Variancia das compras App', {variancia_comprasWeb})

# 2. Crie um programa onde o usuário irá digitar 4 notas, exiba em tela as notas digitadas, a média das notas e se ele está APROVADO , em RECUPERAÇÂO , ou REPROVADO : <> Media abaixo de 5--> REPROVADO<> Média entre 5 e 6.9--> RECUPERACAO<> Média acima de 7--> APROVADO>


import statistics as st
import math as mt

nota1 = float(input("Informe a primeira nota: "))
nota2 = float(input("Informe a segunda nota: "))
nota3 = float(input("Informe a terceira nota: "))
nota4 = float(input("Informe a quarta nota: "))

notas = [nota1, nota2, nota3, nota4]

media_notas = st.mean(notas)
print("A média das notas é de: ", {media_notas})

# 3. Crie um programa que irá receber valores, o usuário poderá digitar quantos valores ele quiser até ele digitar 0 mostre em tela os valores digitados e sua média

import statistics as st
import math as mt


lista = []
num = int(input("Digite um número: "))


while num != 0:
  num = int(input("Digite outro número: "))
  lista.append(num) #O "APPEND" está pegando o que está em "NUM" e adicionando na lista

  print(lista)

media_lista = st.mean(lista)

print(lista)

print()

print(("A média foi de : ", media_lista))

# 4. Crie um programa que irá receber a lista de valores abaixo, e mostre em tela a MODA e quantas vezes ele aparece nessa lista

import statistics as st
import math as mt


lista_de_valores = [
    1, 7, 3, 8, 6, 1, 7, 7, 0, 3, 6, 7, 1, 7, 8, 0, 7, 3, 1, 6, 3, 1, 3, 7, 6, 9, 7, 7, 3, 7, 0, 7, 1, 7, 9

]

modaDestaLista = st.mode(lista_de_valores)
print("A moda desta lista é:", modaDestaLista)

num = modaDestaLista
frequencia = lista_de_valores.count(num)

print(f"Este número apareceu {frequencia} vezes na lista")

# 5. Crie um programa que recebe a lista de valores abaixo, e mostre em telaa VARIANCIA

import statistics as st
import math as mt


lista_de_valores = [
    1, 7, 3, 8, 6, 1, 7, 7, 0, 3, 6, 7, 1, 7, 8, 0, 7, 3, 1, 6, 3, 1, 3, 7, 6, 9, 7, 7, 3, 7, 0, 7, 1, 7, 9

]

varianciaDestaLista = st.variance(lista_de_valores)
print(f"A variância desta lista foi de {varianciaDestaLista}")

# 6. Crie um programa que recebe a lista de valores abaixo, e mostre em tela a VARIANCIA e o DESVIO PADRÃO

# NIVEL 2 FAZER TODOS OS EXERCICIOS SEM BIBLIOTECAS

#lista_de_valores 1, 7, 3, 8 , 6 , 1 , 7 , 7 , 0 , 3 , 6 , 7 1 , 7 ,8 , 0 , 7 , 3 , 1 , 6 , 3 , 1 , 3 , 7 , 6 , 9 , 7 , 7 , 3 , 7 , 0 , 7 , 1 , 7 ,9

#lista_de_valores  35 , 37 , 36 , 34 , 38 , 35 , 37 , 37 , 33 , 36 ,38 , 37 35 , 37 , 34 , 33 , 37 , 36 , 35 , 38 , 36 , 35 , 36 , 37 , 38 ,39 , 37 , 37 , 36 , 37 , 33 , 37 , 35 , 37 , 39


lista_de_valores = [
    35, 37, 36, 34, 38, 35, 37, 37, 33, 36, 38, 37, 35, 37, 34, 33, 37, 36, 35, 38, 36, 35, 36, 37, 38, 39, 37, 37, 36, 37, 33, 37, 35, 37, 39
]

varianciaEx6 = st.variance(lista_de_valores)
devPadraoEx6 = st.stdev(lista_de_valores)

print(f"A variância desta lista foi de {varianciaEx6}")
print()
print(f"Já o Desvio Padrão desta lista foi de {devPadraoEx6}")

# Você está trabalhando com dados de avaliações de produtos (estrelas de 1 a 5) em uma plataforma de e-commerce. Você precisa entender qual é a avaliação mais comum e como as avaliações se distribuem, mesmo sem ferramentas de visualização.

# avaliacoes_produtos

#Descreva a avaliação mais comum.
#Interprete a média e a mediana das avaliações.
#Explique a dispersão das avaliações com base no desvio padrão.

#Primeira Amostragem

import random
import statistics as st

resultadosStDev = []

lista_AvaliacoesAmostra1 = [random.randint(1,5) for i in range(50)]
print(lista_AvaliacoesAmostra1)

print()

moda_Avaliacoes1 = st.mode(lista_AvaliacoesAmostra1)
print(f"A avaliação mais comum é a de nota {moda_Avaliacoes1}")


media_Avaliacoes1 = st.mean(lista_AvaliacoesAmostra1)
print(f"A média de notas das avaliações foi de: {media_Avaliacoes1}")

mediana_Avaliacoes1 = st.median(lista_AvaliacoesAmostra1)
print(f"A mediana das avaliações é {mediana_Avaliacoes1}")

desvioSt_Avaliacoes1 = st.stdev(lista_AvaliacoesAmostra1)
print(f"O desvio padrão das notas atribuidas foi de {desvioSt_Avaliacoes1:.2f}")


resultadosStDev.append(desvioSt_Avaliacoes1)

#Segunda Amostragem

lista_AvaliacoesAmostra2 = [random.randint(1,5) for i in range(50)]
print(lista_AvaliacoesAmostra2)

print()

moda_Avaliacoes2 = st.mode(lista_AvaliacoesAmostra2)
print(f"A avaliação mais comum é a de nota {moda_Avaliacoes2}")

media_Avaliacoes2 = st.mean(lista_AvaliacoesAmostra2)
print(f"A média de notas das avaliações foi de: {media_Avaliacoes2}")

mediana_Avaliacoes2 = st.median(lista_AvaliacoesAmostra2)
print(f"A mediana das avaliações é {mediana_Avaliacoes2}")

desvioSt_Avaliacoes2 = st.stdev(lista_AvaliacoesAmostra2)
print(f"O desvio padrão das notas atribuidas foi de {desvioSt_Avaliacoes2:.2f}")

resultadosStDev.append(desvioSt_Avaliacoes2)

#Terceira Amostragem

lista_AvaliacoesAmostra3 = [random.randint(1,5) for i in range(50)]
print(lista_AvaliacoesAmostra3)

print()

moda_Avaliacoes3 = st.mode(lista_AvaliacoesAmostra3)
print(f"A avaliação mais comum é a de nota {moda_Avaliacoes3}")

media_Avaliacoes3 = st.mean(lista_AvaliacoesAmostra3)
print(f"A média de notas das avaliações foi de: {media_Avaliacoes3}")

mediana_Avaliacoes3 = st.median(lista_AvaliacoesAmostra3)
print(f"A mediana das avaliações é {mediana_Avaliacoes3}")

desvioSt_Avaliacoes3 = st.stdev(lista_AvaliacoesAmostra3)
print(f"O desvio padrão das notas atribuidas foi de {desvioSt_Avaliacoes3:.2f}")

resultadosStDev.append(desvioSt_Avaliacoes3)

#Quarta Amostragem

lista_AvaliacoesAmostra4 = [random.randint(1,5) for i in range(50)]
print(lista_AvaliacoesAmostra4)

print()

moda_Avaliacoes4 = st.mode(lista_AvaliacoesAmostra4)
print(f"A avaliação mais comum é a de nota {moda_Avaliacoes4}")

media_Avaliacoes4 = st.mean(lista_AvaliacoesAmostra4)
print(f"A média de notas das avaliações foi de: {media_Avaliacoes4}")

mediana_Avaliacoes4 = st.median(lista_AvaliacoesAmostra4)
print(f"A mediana das avaliações é {mediana_Avaliacoes4}")

desvioSt_Avaliacoes4 = st.stdev(lista_AvaliacoesAmostra4)
print(f"O desvio padrão das notas atribuidas foi de {desvioSt_Avaliacoes4:.2f}")

resultadosStDev.append(desvioSt_Avaliacoes4)

#Comparação das Amostras

print()
print(f"O desvio padrão das 4 amostras, respectivamente {resultadosStDev}")

print()
varianciaEntreAmostras = st.variance(resultadosStDev)
print(f"A variância entre as 4 amostras foi de: {varianciaEntreAmostras}")

# Numpy

'''
Lista, Matriz e Array

Lista (list)

-Estrutura nativa do Python.
-Aceita tipos variados (números, textos, outras listas).
-Usada para dados genéricos.

Matriz (lista de listas)

-Lista dentro de lista (ex: [[1, 2], [3, 4]]).
-Representa linhas e colunas, mas não é otimizada para cálculo.

Array (numpy.array)

-Vem da biblioteca NumPy.
-Todos os dados são do mesmo tipo (geralmente numéricos).
-Ideal para cálculos rápidos, estatística e ciência de dados.
'''

import numpy as np
import statistics as st

# Gerando um Array de numeros aleatórios (numeros entre 0 e 1)

dados = np.random.rand(4, 3)
dados

dados.dtype # Mostrando o tipo dos dados

dados.shape # Mostra o formato (dimensões) de um array.

dados.ndim # Mostra o número de dimensões (ou seja, quantas "camadas").

lista = [1,2,3,4,5,6,7,8,9,10]
dados2 = np.array(lista)
dados2

lista = [1,2,3,4,5], [6,7,8,9,10]
dados2 = np.array(lista)
dados2

"""Você recebeu os dados de temperatura média (em °C) de uma cidade durante os 7 dias da semana:"""

import numpy as np

temperaturas = np.array ([22.5, 24.0, 19.8, 21.4, 23.0, 25.1, 20.7])
print(temperaturas)

dias = np.array (["Seg", "Ter", "Qua", "Qui", "Sex", "Sáb", "Dom"])
print(dias)

""" Com base nesses dados, responda:"""

'''Qual foi a temperatura média da semana?'''

import numpy as np
import statistics as st

media = st.mean(temperaturas)
print(f"Média de temperatura:", round(media, 2))

'''Qual foi a temperatura máxima e em que dia ocorreu?'''

import numpy as np
import statistics as st

temp_max = np.max(temperaturas) # Encontra o valor máximo no array
index_max = np.argmax(temperaturas) # Encontra o índice do valor máximo no array
dia_max = dias[index_max] # está recebendo o índice do valor máximo para coletar qual foi o dia correspondente


print(f"A temperatura máxima foi {temp_max}°C e ocorreu no {dia_max}.")

'''Quais dias tiveram temperatura acima da média?'''

import numpy as np
import statistics as st

media = st.mean(temperaturas)
print(f"A média foi de {media:.2f}")
dias_acima_media = dias[temperaturas > media]
print()
print(f"Os dias acima da média foram: {dias_acima_media}")

'''Crie um novo array com as temperaturas convertidas para Fahrenheit.
Fórmula: F = C * 1.8 + 32'''

temp_f = (temperaturas * 1.8 + 32)
print(temp_f)

'''Substitua a temperatura de domingo para 22.0°C e recalcule a média.'''

temperaturas2 = np.array ([22.5, 24.0, 19.8, 21.4, 23.0, 25.1, 20.0])
media2 = st.mean(temperaturas2)
print(f"Nova média de temperatura:", round(media2, 2),)

"""Uma fábrica de peças mecânicas registrou sua produção de unidades ao longo de 4 semanas para 3 linhas de produção. Cada linha fabrica um tipo diferente de peça (A, B e C). Os dados foram organizados da seguinte forma:

Linhas (0 a 3): semanas 1 a 4

Colunas (0 a 2): peças A, B e C
"""

'''Total de peças produzidas por semana'''

import random
import numpy as np
import statistics as st

producao = np.random.randint(0, 10000, size=(6, 6))
#gera numeros aleatórios em um array de 2 dimensões (matriz)
#0: valor mínimo (inclusivo)
#10000: valor máximo (exclusivo, exclui o 10000 e para em 09999)
#size=(3, 4): define a forma do array (3 linhas, 4 colunas)


tabelaProdutos = producao.astype(object)

tabelaProdutos[0,0] = ['A']
tabelaProdutos[0,1] = ['A']
tabelaProdutos[0,2] = ['B']
tabelaProdutos[0,3] = ['B']
tabelaProdutos[0,4] = ['C']
tabelaProdutos[0,5] = ['C']
print("\n")

print(tabelaProdutos)
#print(producao)


print()
total_pecas = np.sum(tabelaProdutos, axis=1) # soma os índices da segunte forma (axis=1 irá somar as linhas e axis=0 irá somar as colunas)

print(total_pecas)
print()
print(f"O total produzido na primeira semana foi de {total_pecas[1]}")
print(f"O total produzido na primeira semana foi de {total_pecas[2]}")
print(f"O total produzido na primeira semana foi de {total_pecas[3]}")
print(f"O total produzido na primeira semana foi de {total_pecas[4]}")
print(f"O total produzido na primeira semana foi de {total_pecas[5]}")


#'''delimitar as quantidades diferentes por peças, tentar criar o cabeçalho randomico de strings amarrando até A,B,C tentar criar tres matrizes, uma para cada produto quantos são A, quantos são B, quantos são C se conseguir, com percentuais por tipo de produto (A,B,C)'''

#''' CHAT GPT:

import numpy as np

# Cria um array 4x4 vazio (com strings vazias, por exemplo)
#array = np.full((4, 4), '', dtype=object)

# Imputa dados apenas na primeira linha (linha 0)
#array[0, 0] = 'nome'
#array[0, 1] = 'idade'
#array[0, 2] = 'cidade'
#array[0, 3] = 'profissão'

#print(array)

#EXEMPLO DO PROFESSOR COM DADOS VAZIOS

import statistics as st
import random
import numpy as np

np.random.seed(42)
#Opcional para garantir que os resultados sejam os mesmos

produtos = ['A', 'B', 'C']
dias_da_semana = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']

#Definição da Array

num_linhas = 3

num_semanas = 4

num_dias = len(dias_da_semana)

num_tipos = len(produtos)

producao = np.zeros((num_linhas, num_semanas, num_dias, num_tipos), dtype=int)

producao

#EXEMPLO DO PROFESSOR (COMO UTILIZAR ARQUIVOS PARA ARMAZENAR ESTES ARRAYS / MATRIZES:

csv_array = np.random.rand(10,10)

np.savetxt('csv_array.csv', csv_array)

x = np.loadtxt('csv_array.csv')

print(x)

'''Calcule a soma total de peças produzidas em cada semana.'''

'''Produção total de cada tipo de peça'''

'''Calcule o total produzido das peças A, B e C ao longo das 4 semanas.'''

'''Semana com maior produção total'''

'''Identifique qual semana teve a maior produção somando todos os tipos de peças.'''

'''Média semanal de produção por tipo de peça'''

'''Calcule a média semanal de produção para cada tipo de peça.'''

'''Peça com maior média de produção'''

'''Indique qual peça (A, B ou C) teve a maior média de produção nas 4 semanas.'''

'''Crescimento semanal da produção da peça A'''

'''Calcule a variação percentual semanal da produção da peça A.'''

'''Peças abaixo da média'''

'''Liste as semanas em que alguma peça foi produzida em quantidade abaixo da média do seu tipo.'''

# PANDAS

import pandas as pd
import numpy as np

s1 = pd.Series([1,2,-5,0])
s1

s1

s1.values

s1.index

s2 = pd.Series([1,2,-5,0], index=['a','b','c','d'])

s2

s2 = pd.Series([1,2,-5,0], index=['Vitor','b','Rodrigo','d'])
s2

s2.index

s2['Vitor']=1000

s2

s2[s2>0]

s2*2

s2.isnull()

dados = {'estado':['SP', 'MG', 'PR', 'SP','MG', 'PR'],
         'ano':[ 2023, 2025, 2025, 2024, 2023, 2024],
         'população': [45.9, 21.3, 16.9, 46.6, 24.2, 17.3]
        }

dados

df1=pd.DataFrame(dados)

df1

df1.head(2)

df1.tail(2)

df1.sample(2)

df2=pd.DataFrame(dados, columns=['ano','estado','população'])

df2

df2.estado

df2['estado']

df2.ano

df2.dtypes

df2['estimativa']=50

df2

df2['estimativa']=np.arange(6)

df2

df3=df2

df3

df2['Não Paraná']=df2.estado!='PR'

df2

del df2['Não Paraná']

df2

df2.shape

df2.shape[0]

df2.index

df2.columns

df2.count()

df2.describe(include='all')

df2['ano'] = df2['ano']+2

df2

df2[df2['ano']>2021]

df2.drop('ano', axis='columns')

df2.iloc[0]

df2.iloc[1:3]

df2.iloc[1:3, [1,2]]

"""Exercício 1: Trabalhando com Series

Criação e Inspeção de Series:

Crie uma Series chamada temperaturas com os valores [22, 25, 19, 28, 23] e índices ['Seg', 'Ter', 'Qua', 'Qui', 'Sex'].

"""

import pandas as pd
import numpy as np

temperaturas = pd.Series([22, 25, 19, 28, 23], index=['Seg', 'Ter', 'Qua', 'Qui', 'Sex'])

"""Exiba a Series completa."""

temperaturas

"""Acesse e exiba o valor da temperatura de 'Qua'."""

print(temperaturas.loc['Qua'])

"""Acesse e exiba os valores de temperatura dos dias 'Seg' e 'Sex'.'"""

print(temperaturas.loc[['Seg', 'Sex']])

"""Manipulação de Valores em Series:

Altere a temperatura de 'Ter' para 26. Exiba a Series após a alteração.
"""

temperaturas['Ter']=26
temperaturas

"""Multiplique todos os valores da Series por 1.5. Exiba o resultado."""

import pandas as pd
import numpy as np

temperaturas = pd.Series([22, 25, 19, 28, 23], index=['Seg', 'Ter', 'Qua', 'Qui', 'Sex'])

temperaturas=[temperaturas*2]
temperaturas

"""Filtragem e Nulos em Series:

Exiba apenas as temperaturas que são maiores que 24.
"""

import pandas as pd
import numpy as np

temperaturas = pd.Series([22, 25, 19, 28, 23], index=['Seg', 'Ter', 'Qua', 'Qui', 'Sex'])


temperaturas[temperaturas>24]

"""Crie uma nova Series chamada estoque com os valores [100, 150, np.nan, 80, 120] e índices ['Produto A', 'Produto B', 'Produto C', 'Produto D', 'Produto E']."""

import pandas as pd
import numpy as np

estoque = pd.Series([100, 150, np.nan, 80, 120], index=['Produto A', 'Produto B', 'Produto C', 'Produto D', 'Produto E'])

"""Verifique e exiba quais elementos da Series estoque são nulos."""

import pandas as pd
import numpy as np

estoque = pd.Series([None, 150, np.nan, 80, 120], index=['Produto A', 'Produto B', 'Produto C', 'Produto D', 'Produto E'])

print(estoque[estoque.isna()])

"""Exercício 2: Trabalhando com DataFrames

Criação e Visualização de DataFrames:

Crie um DataFrame chamado cidades_br com os seguintes dados:

Coluna 'Cidade': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba']

Coluna 'Estado': ['SP', 'RJ', 'MG', 'RS', 'PR']

Coluna 'População (milhões)': [12.3, 6.7, 2.5, 1.5, 1.9]

Coluna 'Capital': [True, True, True, True, True]

Exiba o DataFrame completo.
"""

import pandas as pd
import numpy as np

cidades_br = {
          'Cidade': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba'],

         'Estado': ['SP', 'RJ', 'MG', 'RS', 'PR'],

         'População(milhões)': [12.3, 6.7, 2.5, 1.5, 1.9],

         'Capital': [True, True, True, True, True]
        }
df1=pd.DataFrame(cidades_br)

df1

"""Exiba as 3 primeiras linhas do DataFrame."""

df1.head(3)

"""Exiba 2 linhas aleatórias do DataFrame."""

df1.sample(2)

"""Seleção e Atribuição de Colunas:

Acesse e exiba apenas a coluna 'Cidade'.
"""

df1.Cidade

"""Acesse e exiba as colunas 'Estado' e 'População (milhões)'."""

df1.iloc[0:5,[1,2]]

"""Adicione uma nova coluna chamada 'Área (km²)' com os valores [1521, 1200, 331, 496, 435]. Exiba o DataFrame atualizado."""

df2=df1
df2['Área (km²)']= [1521, 1200, 331, 496, 435]
df2

"""Altere os valores da coluna 'Capital' para False para 'Porto Alegre' e 'Curitiba'. Exiba o DataFrame."""

df2.drop('Curitiba', axis='columns')

df2

"""Análise e Manipulação de DataFrames:


Renomeie as colunas do DataFrame para: ['Nome da Cidade', 'UF', 'Habitantes (M)', 'É Capital', 'Tamanho (km²)']. Exiba o DataFrame.
"""



"""Utilize o método describe() para obter um resumo estatístico das colunas numéricas do DataFrame."""



"""Exiba apenas as cidades cuja 'População (milhões)' seja maior que 2.0."""



"""Exclua a coluna 'Tamanho (km²)' do DataFrame. Exiba o DataFrame após a exclusão."""



"""Seleção de Linhas por Posição:

Exiba a primeira linha do DataFrame usando iloc.
"""



"""Exiba as linhas de índice 1 a 3 (inclusive a linha 3) usando iloc."""



"""Exiba a coluna 'UF' e 'Habitantes (M)' para as linhas de índice 0 e 4 usando iloc."""



"""MATPLOTLIB

https://matplotlib.org/
"""

import matplotlib.pyplot as plt
import numpy as np

dias_semana = ["Seg", "Ter", "Qua", "Qui", "Sex", "Sáb", "Dom"]
temperaturas = [25, 27, 26, 28, 30, 29, 26] # Temperaturas fictícias em °C

plt.plot(dias_semana, temperaturas, marker='o', linestyle='-', color='blue')

plt.xlabel("Dia da Semana")
plt.ylabel("Temperatura (°C)")
plt.title("Variação da Temperatura Semanal")

plt.grid(True)

plt.show()

#https://matplotlib.org/stable/plot_types/basic/bar.html#sphx-glr-plot-types-basic-bar-py

import matplotlib.pyplot as plt
import numpy as np

plt.style.use('_mpl-gallery')

# make data:
x = 0.5 + np.arange(8)
y = [4.8, 5.5, 3.5, 4.6, 6.5, 6.6, 2.6, 3.0]

# plot
fig, ax = plt.subplots()

ax.bar(x, y, width=1, edgecolor="white", linewidth=0.7)

ax.set(xlim=(0, 8), xticks=np.arange(1, 8),
       ylim=(0, 8), yticks=np.arange(1, 8))

plt.show()

#https://matplotlib.org/stable/plot_types/basic/stairs.html#sphx-glr-plot-types-basic-stairs-py

import matplotlib.pyplot as plt
import numpy as np

plt.style.use('_mpl-gallery')

# make data
y = [4.8, 5.5, 3.5, 4.6, 6.5, 6.6, 2.6, 3.0]

# plot
fig, ax = plt.subplots()

ax.stairs(y, linewidth=2.5)

ax.set(xlim=(0, 8), xticks=np.arange(1, 8),
       ylim=(0, 8), yticks=np.arange(1, 8))

plt.show()

"""Visualização de Dados (Matplotlib):

Gráfico de Linha: Crie um gráfico de linha que mostre a evolução do 'Total Vendas Mensal' ao longo dos meses.
"""

import matplotlib.pyplot as plt
import numpy as np

meses2025 = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]

vendas_2025 = [
     120.5, 130.2, 115.8, 122.0, 135.0, 126.7,
     125.5, 133.2, 116.5, 125.0, 136.0, 126.7
]


plt.plot(meses2025, vendas_2025, marker='o', linestyle='-', color='red')

plt.xlabel("Meses")
plt.ylabel("Vendas")
plt.title("Total Vendas Mensal")

plt.grid(False)

plt.show()

"""Defina o 'Mês' no eixo X e 'Total Vendas Mensal' no eixo Y."""

import matplotlib.pyplot as plt
import numpy as np

meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]

vendas = [
            120.5, 130.2, 115.8, 122.0, 135.0, 126.7
         ]


plt.plot(meses, vendas, marker='o', linestyle='-', color='red')

plt.xlabel("Primeiro Semestre")
plt.ylabel("Total Vendas Mensal")

plt.grid(False)

plt.show()

"""Adicione um título ao gráfico: "Evolução das Vendas Mensais da TechGadgets Ltda."."""

import matplotlib.pyplot as plt
import numpy as np

meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]

vendas = [
            120.5, 130.2, 115.8, 122.0, 135.0, 126.7
         ]


plt.plot(meses, vendas, marker='o', linestyle='-', color='red')

plt.xlabel("Primeiro Semestre")
plt.ylabel("Total Vendas Mensal")
plt.title("Evolução das Vendas Mensais da TechGadgets Ltda")

plt.grid(False)

plt.show()

"""Adicione rótulos aos eixos X ("Mês") e Y ("Vendas (R$)")."""

import matplotlib.pyplot as plt
import numpy as np

meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]

vendas = [
            120.5, 130.2, 115.8, 122.0, 135.0, 126.7
         ]


plt.plot(meses, vendas, marker='o', linestyle='-', color='red')

plt.xlabel("Mês")
plt.ylabel("Vendas (R$)")
plt.title("Evolução das Vendas Mensais da TechGadgets Ltda")

plt.grid(False)

plt.show()

"""Adicione uma grade ao gráfico.


"""

import matplotlib.pyplot as plt
import numpy as np

meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"]

vendas = [
            120.5, 130.2, 115.8, 122.0, 135.0, 126.7
         ]


plt.plot(meses, vendas, marker='o', linestyle='-', color='red')

plt.xlabel("Mês")
plt.ylabel("Vendas (R$)")
plt.title("Evolução das Vendas Mensais da TechGadgets Ltda")

plt.grid(True)

plt.show()

"""Gráfico de Barras: Crie um gráfico de barras que compare as vendas totais de cada categoria de produto ('Produto A', 'Produto B', 'Acessórios')."""

import matplotlib.pyplot as plt
import numpy as np

plt.style.use('_mpl-gallery')

# make data:
x = ['Produto A', 'Produto B', 'Acessórios']
y = [4.8, 5.5, 3.5]

# plot
fig, ax = plt.subplots()

ax.bar(x, y, width=1, edgecolor="white", linewidth=0.7)

ax.set(xlim=(0, 2), xticks=np.arange(1, 2),
       ylim=(0, 2), yticks=np.arange(1, 2))

plt.show()

"""Defina os nomes das categorias no eixo X e as vendas totais no eixo Y."""



"""Adicione um título ao gráfico: "Vendas Totais por Categoria de Produto"."""



"""Adicione rótulos aos eixos X ("Categoria de Produto") e Y ("Vendas Totais (R$)")."""



"""SciPY"""

import numpy as np
import matplotlib.pyplot as plt

from scipy.integrate import solve_ivp
from scipy.optimize import minimize

#Equação a função y'= -2 * y com y(0) = 1
#Definindo a variável (Função que representa a derivada em relação )
def dydt (t,y):
  return -2 * y

#Condições iniciais
y0= [1]
t_span = (0,5) # Intervalo de tempo
# Resolução

solution = solve_ivp(dydt, t_span, y0, t_eval=np.linspace(0, 5, 100))

solution

plt.plot(solution.t, solution.y[0], label='y(t)')
plt.xlabel('Tempo t')
plt.ylabel('y(t)')
plt.title('Solução da equação Diferencial y´= 2 * y ')
plt.legend()
plt.show()

# Encontrar o mínimo da função f(x) = (x-3)^2 + 4

def f(x):
  return (x-3) ** 2 + 4

x0=[0]

  #Metodo BFGS encontrar o mínumo da função

result = minimize(f, x0, method='BFGS')

print('Valor mínimo de F(x):', result.fun)
print('Valor de x que minimiza f(x):', result.x)
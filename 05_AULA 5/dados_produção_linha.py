# -*- coding: utf-8 -*-
"""Dados_Produção_Linha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hOxPi-QJynq72KHyDgN9Lk1ck-7QPMIo
"""

import numpy as np

# --- Configurações Iniciais e Geração de Dados ---
# Para garantir que os resultados sejam os mesmos toda vez que o código for executado.
np.random.seed(42)

# Nomes dos produtos e dias da semana para melhor legibilidade na saída.
produtos = ['A', 'B', 'C']
dias_semana = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb']

# Definindo as dimensões do nosso array de produção.
num_linhas = 3
num_semanas = 4
num_dias = len(dias_semana) # Equivalente a 6 dias
num_tipos = len(produtos)   # Equivalente a 3 tipos de peças

# Criando um array NumPy 4D preenchido com zeros.
# A estrutura será: [linha, semana, dia, tipo de peça]
producao = np.zeros((num_linhas, num_semanas, num_dias, num_tipos), dtype=int)

# Gerando dados aleatórios para cada tipo de peça dentro das faixas especificadas.
# A indexação '[:, :, :, 0]' significa: todas as linhas, todas as semanas, todos os dias, mas apenas para o primeiro tipo de peça (Produto A).
producao[:, :, :, 0] = np.random.randint(50, 101, size=(num_linhas, num_semanas, num_dias))  # Produção da Peça A (entre 50 e 100)
producao[:, :, :, 1] = np.random.randint(110, 201, size=(num_linhas, num_semanas, num_dias)) # Produção da Peça B (entre 110 e 200)
producao[:, :, :, 2] = np.random.randint(210, 301, size=(num_linhas, num_semanas, num_dias)) # Produção da Peça C (entre 210 e 300)

# --- Exibir Produção Organizada (Opcional, para visualização dos dados brutos) ---
print("=== Visão Geral da Produção Diária por Linha e Semana ===")
for linha in range(num_linhas):
    print(f"\n--- Linha de Produção {linha + 1} ---")
    for semana in range(num_semanas):
        print(f"  Semana {semana + 1}:")
        for dia in range(num_dias):
            producao_dia = producao[linha, semana, dia]
            # Formata a saída para mostrar a produção de cada tipo de peça no dia.
            print(f"    {dias_semana[dia]}: A={producao_dia[0]} B={producao_dia[1]} C={producao_dia[2]}")

# --- Análises Solicitadas ---

# 1. Produção total de cada linha (L1, L2, L3) ao longo das 4 semanas.
# Usamos sum(axis=(1, 2, 3)) para somar ao longo das dimensões de semana, dia e tipo de peça.
# Isso nos dará a soma total para cada linha.
producao_total_por_linha = producao.sum(axis=(1, 2, 3))
print("\n" + "="*50)
print("1. Produção Total de Peças por Linha (L1, L2, L3) em 4 Semanas")
print("="*50)
for i, total in enumerate(producao_total_por_linha):
    print(f"Linha {i + 1}: {total} unidades")

# 2. Produção total por tipo de peça (A, B, C) considerando todas as linhas e semanas.
# Acessamos cada tipo de peça usando o índice na última dimensão e somamos tudo.
total_peca_A = producao[:, :, :, 0].sum() # Todas as linhas, todas as semanas, todos os dias, apenas peça A.
total_peca_B = producao[:, :, :, 1].sum() # Todas as linhas, todas as semanas, todos os dias, apenas peça B.
total_peca_C = producao[:, :, :, 2].sum() # Todas as linhas, todas as semanas, todos os dias, apenas peça C.

print("\n" + "="*50)
print("2. Produção Total por Tipo de Peça (A, B, C) em Todas as Linhas e Semanas")
print("="*50)
print(f"Produção Total da Peça A: {total_peca_A} unidades")
print(f"Produção Total da Peça B: {total_peca_B} unidades")
print(f"Produção Total da Peça C: {total_peca_C} unidades")

# 3. Peça mais produzida da linha 1.
# Primeiro, somamos a produção de cada tipo de peça (A, B, C) APENAS para a Linha 1.
# 'producao[0, :, :, :]' seleciona todos os dados da Linha 1.
# '.sum(axis=(0, 1))' soma ao longo das dimensões de semana (0) e dia (1), resultando em um total para cada tipo de peça.
producao_linha1_por_tipo = producao[0, :, :, :].sum(axis=(0, 1))

# Encontramos o índice da peça com maior valor usando 'argmax()'.
indice_peca_mais_produzida_l1 = producao_linha1_por_tipo.argmax()
# Usamos o índice para pegar o nome do produto e seu valor.
peca_mais_produzida_l1_nome = produtos[indice_peca_mais_produzida_l1]
valor_peca_mais_produzida_l1 = producao_linha1_por_tipo[indice_peca_mais_produzida_l1]

print("\n" + "="*50)
print("3. Peça Mais Produzida da Linha 1")
print("="*50)
print(f"Produção total da Linha 1 por tipo: A={producao_linha1_por_tipo[0]}, B={producao_linha1_por_tipo[1]}, C={producao_linha1_por_tipo[2]}")
print(f"A peça mais produzida na Linha 1 é: {peca_mais_produzida_l1_nome} com {valor_peca_mais_produzida_l1} unidades.")


# 4. Média de produção por tipo de peça por linha (média semanal de cada tipo de peça por linha).
# Calculamos a média para cada linha e cada tipo de peça.
# 'axis=(1, 2)' indica que a média será calculada ao longo das dimensões de semana e dia.
media_producao_por_tipo_por_linha = producao.mean(axis=(1, 2))

print("\n" + "="*50)
print("4. Média de Produção Semanal por Tipo de Peça por Linha")
print("="*50)
for i, linha_medias in enumerate(media_producao_por_tipo_por_linha):
    print(f"Linha {i + 1}:")
    for j, media in enumerate(linha_medias):
        print(f"  Peça {produtos[j]}: {media:.2f} unidades/semana")

# 5. Semana com maior produção total da fábrica.
# Somamos toda a produção para cada semana, acumulando todas as linhas e tipos de peça.
# 'axis=(0, 2, 3)' significa que somamos ao longo das dimensões de linha, dia e tipo, mantendo as semanas separadas.
producao_total_por_semana = producao.sum(axis=(0, 2, 3))
# Encontramos o índice da semana com maior produção.
semana_maior_producao_indice = producao_total_por_semana.argmax()
# A semana é o índice + 1 (já que semanas são 1-indexadas).
semana_maior_producao_valor = producao_total_por_semana[semana_maior_producao_indice]

print("\n" + "="*50)
print("5. Semana com Maior Produção Total da Fábrica")
print("="*50)
for i, total in enumerate(producao_total_por_semana):
    print(f"Semana {i + 1}: {total} unidades")
print(f"A semana com a maior produção total da fábrica é a Semana {semana_maior_producao_indice + 1}, com {semana_maior_producao_valor} unidades.")

# 6. Crescimento da produção da peça A da linha 1 semana a semana.
# Selecionamos a produção da peça A na Linha 1, somando os dias de cada semana.
# 'producao[0, :, :, 0]' -> Linha 1, todas as semanas, todos os dias, peça A.
# '.sum(axis=1)' -> Soma ao longo dos dias, dando o total semanal da peça A para a Linha 1.
producao_a_l1_semanal = producao[0, :, :, 0].sum(axis=1)

print("\n" + "="*50)
print("6. Crescimento da Produção da Peça A da Linha 1 (Variação Percentual Semana a Semana)")
print("="*50)
print(f"Produção semanal da Peça A na Linha 1: {producao_a_l1_semanal}")

for i in range(1, num_semanas):
    producao_semana_anterior = producao_a_l1_semanal[i - 1]
    producao_semana_atual = producao_a_l1_semanal[i]

    if producao_semana_anterior != 0: # Evita divisão por zero
        variacao_percentual = ((producao_semana_atual - producao_semana_anterior) / producao_semana_anterior) * 100
        print(f"Semana {i + 1} vs. Semana {i}: Variação de {variacao_percentual:.2f}%")
    else:
        print(f"Semana {i + 1} vs. Semana {i}: Produção da semana anterior (Semana {i}) foi zero, impossível calcular variação percentual.")

# 7. Porcentagem de contribuição de cada linha na produção total de peças B.
# Primeiro, calculamos a produção total da peça B por cada linha.
# 'producao[:, :, :, 1]' -> Todas as linhas, todas as semanas, todos os dias, apenas peça B.
# '.sum(axis=(1, 2))' -> Soma ao longo das dimensões de semana e dia.
producao_b_por_linha = producao[:, :, :, 1].sum(axis=(1, 2))
# Em seguida, calculamos o total geral da peça B (já calculado como total_peca_B).
# total_peca_B = producao[:, :, :, 1].sum() # Reutilizando a variável já calculada acima

print("\n" + "="*50)
print("7. Porcentagem de Contribuição de Cada Linha na Produção Total de Peças B")
print("="*50)
if total_peca_B > 0: # Evita divisão por zero se a produção total de B for 0
    for i, producao_linha in enumerate(producao_b_por_linha):
        contribuicao_percentual = (producao_linha / total_peca_B) * 100
        print(f"Linha {i + 1} contribuiu com {contribuicao_percentual:.2f}% na produção total da Peça B ({producao_linha} unidades de {total_peca_B}).")
else:
    print("A produção total da Peça B é zero, então a contribuição percentual não pode ser calculada.")
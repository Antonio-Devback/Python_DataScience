# -*- coding: utf-8 -*-
"""Statmodels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXN4wNFlxcq_PzpQ5wGuYY6PY3otbw-a

#Python para Data Science
##Msc. Ailton Santos
"""

import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Gerar Dados de Exemplo
# Normalmente, você carregaria seus dados de um CSV, banco de dados, etc.
# Ex: df = pd.read_csv('seus_dados.csv')

data = {
    'Investimento_Publicidade': [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80],
    'Vendas': [120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 480, 510, 540]
}
df = pd.DataFrame(data)

print("Dados de Exemplo:")
print(df.head())
print("\n")

# 2. Visualizar a Relação (Opcional, mas recomendado)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Investimento_Publicidade', y='Vendas', data=df)
plt.title('Vendas vs. Investimento em Publicidade')
plt.xlabel('Investimento em Publicidade (em R$ Milhares)')
plt.ylabel('Vendas (em Unidades)')
plt.grid(True)
plt.show()

# 3. Preparar os dados para o Statsmodels
# No statsmodels, você precisa adicionar uma constante ao seu preditor (variável independente)
# para que o modelo possa calcular o intercepto (b0 na equação y = b0 + b1*x)
X = df['Investimento_Publicidade']
X = sm.add_constant(X) # Adiciona a constante para o intercepto
y = df['Vendas']

# 4. Construir e Treinar o Modelo de Regressão Linear
# sm.OLS significa "Ordinary Least Squares" (Mínimos Quadrados Ordinários)
model = sm.OLS(y, X)
results = model.fit() # 'fit()' treina o modelo

# 5. Analisar os Resultados
print("Resumo do Modelo de Regressão:")
print(results.summary())

# 6. Interpretar os Resultados (Exemplo simplificado)
# Coeficientes:
# - const: O intercepto (valor de Vendas quando Investimento_Publicidade é 0)
# - Investimento_Publicidade: O coeficiente angular (quanto as Vendas aumentam para cada unidade a mais de Investimento_Publicidade)

# R-squared: Proporção da variância na variável dependente que pode ser prevista pelas variáveis independentes.
# Quanto mais próximo de 1, melhor o ajuste do modelo.

# p-values (P>|t|): Indica a significância estatística de cada coeficiente.
# Um p-value baixo (geralmente < 0.05) sugere que o coeficiente é estatisticamente diferente de zero.

# 7. Plotar a Linha de Regressão (Opcional)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Investimento_Publicidade', y='Vendas', data=df, label='Dados Reais')
plt.plot(df['Investimento_Publicidade'], results.predict(X), color='red', label='Linha de Regressão')
plt.title('Regressão Linear: Vendas vs. Investimento em Publicidade')
plt.xlabel('Investimento em Publicidade (em R$ Milhares)')
plt.ylabel('Vendas (em Unidades)')
plt.legend()
plt.grid(True)
plt.show()